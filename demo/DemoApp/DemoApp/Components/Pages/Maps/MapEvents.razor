@page "/map-events"
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime
@inject ILogger<MapEvents> Logger
@inject IToastService ToastService
@inject IDialogService DialogService

<PageTitle>Map Events</PageTitle>

<FluentLayout>
    <MapPageHeader Header="@header" HRefSource="@hRefSource">
        <FluentLabel>
            This example demonstrates subscribing to the map Click, MouseMove, and MouseOut events.
            <br />
			When the mouse moves over the map, the display to the right of the map will be updated.
            <br />
            Click on the map to toggle event notifications on/off.
            <br /><br />
            Use the "Reset Map" button to reset the map to its initial state.
        </FluentLabel>
    </MapPageHeader>

    <FluentToolbar>
        <FluentButton Disabled="@disabled" IconStart="@(new Icons.Regular.Size20.ArrowReset())" Title="Reset Map" OnClick="@ResetMap" />
    </FluentToolbar>

    <FluentStack>
        <FluentCard>
            <AzureMap Height="@mapHeight"
                      Width="@mapWidth"
                      Controls="@MapHelpers.GetDefaultControls()"
                      Events="@mapEvents.Items"
                      OnMapEventReady="OnMapEventReady"
                      OnMapEventMouse="OnMapEventMouse"
                      Options="@options" />
        </FluentCard>
        <FluentCard>
            <FluentStack Orientation="Orientation.Vertical">
                <FluentLabel Typo="Typography.Body">Pixel: @mouseDisplay.Pixel?.ToString()</FluentLabel>
                <FluentLabel Typo="Typography.Body">Position: @mouseDisplay.Position?.ToString()</FluentLabel>
                <FluentLabel Typo="Typography.Subject">Shapes</FluentLabel>
                <div class="display-events-div">
                    <ShapeGrid Items="@mouseDisplay.Shapes" />
                </div>
            </FluentStack>
        </FluentCard>
    </FluentStack>


</FluentLayout>

<FluentOverlay @bind-Visible="@overlay"
               Transparent="false">
    <FluentProgressRing />
</FluentOverlay>

<style>
    .display-events-div {
        overflow: auto;
        height: 300px;
        width: 100%;
        background-color: azure;
    }
</style>

@code {
    private bool overlay;
    private string hRefSource => HRefCodeSource.DemoApp.CodeUrl($"{nameof(MapEvents)}.razor");
    private readonly string header = "Map Events";
    private string mapHeight = "400px";
    private string mapWidth = "100%";
    private MapOptions options = MapHelpers.GetDefaultMapOptions();
    private MapInterop? mapInterop;
    private bool disabled => overlay || mapInterop == null;
    private readonly SymbolLayerDef layerDef = new SymbolLayerDef();
    private readonly EnumList<MapEventType> mapEvents = new();
    private readonly MouseDisplay mouseDisplay = new();
    private bool notificationsEnabled = true;

    protected override void OnInitialized()
    {
        //Mouse Events
        mapEvents.AddValues(
            MapEventType.Click,
            MapEventType.MouseMove,
            MapEventType.MouseOut);
    }

    private async Task OnMapEventReady(MapEventArgs e)
    {
        try
        {
            mapInterop = new MapInterop(JSRuntime, e.MapId);
            await CreateSymbolLayer();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, null);
            ToastService.Error(ex);
        }
    }

    private async Task CreateSymbolLayer()
    {
        try
        {
            if (mapInterop == null) return;

            layerDef.Options!.IconOptions!.Image = IconImage.Pin_Red;
            await mapInterop.Map.CreateDatasource(layerDef.GetDataSource());
            await mapInterop.Layers.CreateLayer(layerDef);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, null);
            ToastService.Error(ex);
        }
    }

    private async Task OnMapEventMouse(MapEventMouseArgs e)
    {
        try
        {
            await Task.CompletedTask;

            switch (e.Type)
            {
                case MapEventType.Click:
					notificationsEnabled = !notificationsEnabled;
                    break;
                case MapEventType.MouseMove:
                case MapEventType.MouseOut:
					if (notificationsEnabled)
                        mouseDisplay.SetValues(e);
                    break;
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, null);
            ToastService.Error(ex);
        }
    }

    private async Task ResetMap()
    {
        try
        {
            if (mapInterop == null) return;

			mouseDisplay.SetValues(null);
            await mapInterop.RemoveLayer(layerDef);
            await mapInterop.Configuration.SetMapOptions(options);
            await CreateSymbolLayer();
			notificationsEnabled = true;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, null);
            ToastService.Error(ex);
        }
    }

    private class MouseDisplay
    {
        public Pixel? Pixel { get; private set; }
        public Position? Position { get; private set; }
        public List<MapEventShape>? Shapes { get; private set; }

        public void SetValues(MapEventMouseArgs? e)
        {
            switch (e?.Type)
            {
                case MapEventType.MouseOut:
                    Pixel = null;
                    Position = null;
                    Shapes = [];
                    break;
                default:
                    Pixel = e?.Payload?.Pixel;
                    Position = e?.Payload?.Position;
                    Shapes = e?.Payload?.Shapes ?? [];
                    break;
            }
        }
    }
}
