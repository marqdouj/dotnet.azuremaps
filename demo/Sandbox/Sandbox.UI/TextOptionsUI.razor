@using Marqdouj.DotNet.AzureMaps.Map.Common
@implements IDialogContentComponent<TextOptionsUIModel>

@if (viewStyle == UIViewStyle.DataGrid)
{
    <UIValuesGrid Items="@Content.ToUIList()" />
}
@if (viewStyle == UIViewStyle.Grid)
{
    <FluentStack Orientation="Orientation.Vertical" Width="@Width" Height="@Height">
        <FluentLabel Typo="Typography.Subject">
            <span class="note-span">NOTE: </span> Not all settings are displayed.
        </FluentLabel>

        <FluentGrid>
            <FluentGridItem>
                <UISelect Model="@Content.AllowOverlap" Items="@bools" ReadOnly="@ReadOnly" />
            </FluentGridItem>

            <FluentGridItem>
                <UISelect Model="@Content.Anchor" Items="@anchors" ReadOnly="@ReadOnly" />
            </FluentGridItem>

            <FluentGridItem>
                <UIColor Model="@Content.Color" ReadOnly="@ReadOnly" />
            </FluentGridItem>

            <FluentGridItem>
                <UIText Model="@Content.HaloBlur" ReadOnly="@ReadOnly" FieldType="TextFieldType.Number" />
            </FluentGridItem>

            <FluentGridItem>
                <UIColor Model="@Content.HaloColor" ReadOnly="@ReadOnly" />
            </FluentGridItem>

            <FluentGridItem>
                <UIText Model="@Content.HaloWidth" ReadOnly="@ReadOnly" FieldType="TextFieldType.Number" />
            </FluentGridItem>

            <FluentGridItem>
                <UISelect Model="@Content.IgnorePlacement" Items="@bools" ReadOnly="@ReadOnly" />
            </FluentGridItem>

            <FluentGridItem>
                <UISelect Model="@Content.Justify" Items="@justifies" ReadOnly="@ReadOnly" />
            </FluentGridItem>

            <FluentGridItem>
                <PixelUI Model="@Content.OffsetUI" Display="@Content.Offset" ReadOnly="@ReadOnly" />
            </FluentGridItem>
            
            <FluentGridItem>
                <UIText Model="@Content.Opacity" ReadOnly="@ReadOnly" FieldType="TextFieldType.Number" />
            </FluentGridItem>
            
            <FluentGridItem>
                <UISelect Model="@Content.Optional" Items="@bools" ReadOnly="@ReadOnly" />
            </FluentGridItem>
            
            <FluentGridItem>
                <UIText Model="@Content.Padding" ReadOnly="@ReadOnly" FieldType="TextFieldType.Number" />
            </FluentGridItem>
            
            <FluentGridItem>
                <UISelect Model="@Content.PitchAlignment" Items="@alignments" ReadOnly="@ReadOnly" />
            </FluentGridItem>

            <FluentGridItem>
                <UIText Model="@Content.RadialOffset" ReadOnly="@ReadOnly" FieldType="TextFieldType.Number" />
            </FluentGridItem>
            
            <FluentGridItem>
                <UIText Model="@Content.Rotation" ReadOnly="@ReadOnly" FieldType="TextFieldType.Number" />
            </FluentGridItem>

            <FluentGridItem>
                <UISelect Model="@Content.RotationAlignment" Items="@alignments" ReadOnly="@ReadOnly" />
            </FluentGridItem>

            <FluentGridItem>
                <UIText Model="@Content.Size" ReadOnly="@ReadOnly" FieldType="TextFieldType.Number" />
            </FluentGridItem>

            <FluentGridItem>
                <UIText Model="@Content.TextField" ReadOnly="@ReadOnly" />
            </FluentGridItem>

            <FluentGridItem>
                <UISelect Model="@Content.VariableAnchor" Items="@anchors" ReadOnly="@ReadOnly" />
            </FluentGridItem>
        </FluentGrid>
    </FluentStack>
}

<style>
    .note-span {
        font-weight: 500;
    }
</style>

@code {
    private List<Option<string?>> bools = UIExtensions.GetBoolLookup(true);
    private List<Option<string>> anchors = UIExtensions.GetEnumLookup<PositionAnchor>(true);
    private List<Option<string>> justifies = UIExtensions.GetEnumLookup<TextJustify>(true);
    private List<Option<string>> alignments = UIExtensions.GetEnumLookup<MapItemAlignment>(true);
    private UIViewStyle viewStyle => Dialog != null ? Content.ViewStyle : ViewStyle;

    [Parameter, EditorRequired]
    public TextOptionsUIModel Content { get; set; }

    [CascadingParameter]
    public FluentDialog? Dialog { get; set; }

    [Parameter]
    public string? Height { get; set; }

    [Parameter]
    public bool ReadOnly { get; set; }

    [Parameter]
    public UIViewStyle ViewStyle { get; set; }

    [Parameter]
    public string? Width { get; set; }
}
