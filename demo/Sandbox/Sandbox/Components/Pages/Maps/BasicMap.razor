@page "/map-basic"
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime
@inject ILogger<BasicMap> Logger
@inject IToastService ToastService

<PageTitle>Basic Map</PageTitle>

<FluentLayout>
    <PageHeader Header="@subject"
                   HRefCode="@hRefCode"
                   Subject="@subject">
        <FluentStack Orientation="Orientation.Vertical">
            <FluentLabel>
                The map is initialized to a specific camera position (Seattle, WA), with some common map controls.
            </FluentLabel>
        </FluentStack>
    </PageHeader>

    <FluentToolbar>
        <FluentButton Disabled="@overlay" IconStart="@(new Icons.Regular.Size20.ArrowReset())" Title="Reset Map" OnClick="@ResetMap" />
    </FluentToolbar>

    <FluentStack Orientation="Orientation.Vertical">
        <AzureMap Id="@mapId"
                  Height="@mapHeight"
                  Width="@mapWidth"
                  Controls="@MapHelpers.GetDefaultControls()"
                  OnMapEventReady="@OnMapEventReady"
                  Options="@options" />
    </FluentStack>
</FluentLayout>

<FluentOverlay @bind-Visible="@overlay"
               Transparent="false">
    <FluentProgressRing />
</FluentOverlay>

<style>
    .hidden {
        display: none;
    }
</style>


@code {
    private const string mapId = "BasicMap";
    private readonly string hRefCode = HRefCodeSource.Sandbox.CodeUrl("BasicMap.razor");
    private readonly string subject = "Basic Map";
    private string mapHeight = "400px";
    private string mapWidth = "100%";
    private bool overlay;
    private MapOptions? options;
    private MapInterop? mapInterop;

    protected override void OnInitialized()
    {
        // Initialize map options with a specific camera position and style
        options = new MapOptions
        {
            Camera = new CameraOptions
            {
                Center = new Position(-122.33, 47.6), // (Seattle, WA)
                Zoom = 10
            },
            Style = new StyleOptions
            {
                Style = MapStyle.Road_Shaded_Relief
            },
        };
    }

    private async Task OnMapEventReady(MapEventArgs e)
    {
        try
        {
            await Task.CompletedTask;
            mapInterop = new MapInterop(JSRuntime, mapId);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, null);
            ToastService.Error(ex);
        }
    }

    private async Task ResetMap()
    {
        try
        {
            await mapInterop!.Configuration.SetMapOptions(options!);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, null);
            ToastService.Error(ex);
        }
    }
}
