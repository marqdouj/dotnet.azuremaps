@page "/map-layer-HeatMap"
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime
@inject ILogger<HeatMapLayer> Logger
@inject IToastService ToastService

<PageTitle>@subject</PageTitle>

<FluentLayout>
    <PageHeader Header="@subject"
                HRefCode="@hRefCode"
                HRefDocs="@hRefDocs"
                Subject="@subject">
        <FluentStack Orientation="Orientation.Vertical">
            <FluentLabel>
                The map is initialized to a specific camera position (Seattle, WA), with some common map controls.
            </FluentLabel>
        </FluentStack>
    </PageHeader>

    <ComingSoon/>
</FluentLayout>

<FluentOverlay @bind-Visible="@overlay"
               Transparent="false">
    <FluentProgressRing />
</FluentOverlay>

<style>
    .hidden {
        display: none;
    }
</style>


@code {
    private const string layerType = "HeatMap";
    private readonly string hRefCode = HRefCodeSource.Sandbox.CodeUrl("Layers/HeatMapLayer.razor");
    private readonly string hRefDocs = HRefCodeSource.AzureDocs.CodeUrl("map-add-heat-map-layer");
    private readonly string subject = $"{layerType} Layer";
    private const string mapId = $"map{layerType}Layer";
    private const string sourceId = $"my{layerType}Source";
    private string mapHeight = "400px";
    private string mapWidth = "100%";
    private bool overlay;
    private MapOptions options = MapHelpers.GetDefaultMapOptions();
    private MapInterop? mapInterop;

    private async Task OnMapEventReady(MapEventArgs e)
    {
        try
        {
            await Task.CompletedTask;
            mapInterop = new MapInterop(JSRuntime, mapId);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, null);
            ToastService.Error(ex);
        }
    }

    private async Task ResetMap()
    {
        try
        {
            await mapInterop!.Configuration.SetMapOptions(options!);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, null);
            ToastService.Error(ex);
        }
    }
}
