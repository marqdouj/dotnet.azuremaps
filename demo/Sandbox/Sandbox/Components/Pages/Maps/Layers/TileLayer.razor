@page "/map-layer-Tile"
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime
@inject ILogger<TileLayer> Logger
@inject IToastService ToastService
@inject IDataService DataSerice
@inject IDialogService DialogService
@inject IAzureMapsXmlService XmlService

<PageTitle>@subject</PageTitle>

<FluentLayout>
    <PageHeader Header="@subject"
                HRefCode="@hRefCode"
                HRefDocs="@hRefDocs"
                Subject="@subject">
        <LayerHeaderContent />
    </PageHeader>

    <FluentToolbar>
        <FluentButton Disabled="@overlay" IconStart="@(new Icons.Regular.Size20.ArrowReset())" Title="Reset Map" OnClick="@ResetMap" />
        <FluentSpacer Width="5" />
        <FluentButton IconStart="@(new Icons.Regular.Size20.Layer())" Title="Create Layer" OnClick="@CreateLayer" />
    </FluentToolbar>

    <LayerContent ActiveTab="@activeTab">
        <MapContent>
            <AzureMap Height="@mapHeight"
                      Width="@mapWidth"
                      Controls="@MapHelpers.GetDefaultControls()"
                      OnMapEventReady="@OnMapEventReady"
                      Options="@options" />
        </MapContent>
        <SettingsContent>
            <TileLayerUI Content="@uiModel" Height="@mapHeight" Width="@mapWidth" />
        </SettingsContent>
    </LayerContent>
</FluentLayout>

<FluentOverlay @bind-Visible="@overlay"
               Transparent="false">
    <FluentProgressRing />
</FluentOverlay>

@code {
    private const string layerType = "Tile";
    private readonly string subject = $"{layerType} Layer";
    private readonly string hRefCode = HRefCodeSource.Sandbox.CodeUrl($"Layers/{layerType}Layer.razor");
    private readonly string hRefDocs = HRefCodeSource.AzureDocs.CodeUrl("map-add-tile-layer");
    private string mapHeight = "400px";
    private string mapWidth = "100%";
    private bool overlay;
    private LayerContentTab activeTab;
    private MapOptions options = MapHelpers.GetDefaultMapOptions();
    private MapInterop? mapInterop;
    private TileLayerUIModel? uiModel;

    protected override void OnInitialized()
    {
        uiModel = new(XmlService);
        uiModel.Options.Opacity!.Value = 0.8;
        uiModel.Options.TileSize!.Value = 256;
        uiModel.Options.MinSourceZoom!.Value = 7;
        uiModel.Options.MaxSourceZoom!.Value = 17;
    }

    private async Task OnMapEventReady(MapEventArgs e)
    {
        try
        {
            await Task.CompletedTask;
            mapInterop = new MapInterop(JSRuntime, e.MapId);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, null);
            ToastService.Error(ex);
        }
    }

    private async Task ResetMap()
    {
        try
        {
            await RemoveLayer();
            await mapInterop!.Configuration.SetMapOptions(options!);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, null);
            ToastService.Error(ex);
        }
    }

    private async Task CreateLayer()
    {
        try
        {
            if (mapInterop is null) return;

            var uiModelclone = (TileLayerUIModel)uiModel!.Clone();
            uiModelclone.ViewStyle = UIViewStyle.Grid;

            var parameters = MapHelpers.GetLayerDialogParameters();
            IDialogReference dialog = await DialogService.ShowDialogAsync<TileLayerUI>(uiModelclone, parameters);
            DialogResult? result = await dialog.Result;

            if (!result.Cancelled && result.Data != null)
            {
                var update = (TileLayerUIModel)result.Data;
                uiModel = update;
            }
            else
            {
                return;
            }

            await RemoveLayer();

            var data = await DataSerice.GetImageLayerData();
            uiModel.Options.TileUrl.Value = await DataSerice.GetTileLayerUrl();
            await mapInterop.Map.CreateDatasource(uiModel.GetDataSource()!);
            await mapInterop.Layers.CreateLayer(uiModel.Source!);

            await mapInterop.Configuration.ZoomTo(new Position(-122.426181, 47.608070), 11);
            ToastService.Success($"{layerType} layer was created.");
            activeTab = LayerContentTab.Map;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, null);
            ToastService.Error(ex);
        }
    }

    private async Task RemoveLayer()
    {
        try
        {
            if (mapInterop is null) return;

            await mapInterop.Layers.RemoveLayer(uiModel!.Source!.Id!);
            await mapInterop.Map.RemoveDatasource(uiModel.Source.SourceId!);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, null);
            ToastService.Error(ex);
        }
    }
}
