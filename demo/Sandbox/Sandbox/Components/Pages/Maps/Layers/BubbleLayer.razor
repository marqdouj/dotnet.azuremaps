@page "/map-layer-bubble"
@using Sandbox.Components.Pages.Maps.UI
@using Sandbox.Components.Pages.Maps.UI.BubbleLayer
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime
@inject ILogger<BubbleLayer> Logger
@inject IToastService ToastService
@inject IDataService DataSerice
@inject IAzureMapsXmlService XmlService

<PageTitle>@subject</PageTitle>

<FluentLayout>
    <PageHeader Header="@subject"
                HRefCode="@hRefCode"
                HRefDocs="@hRefDocs"
                Subject="@subject">
        <FluentStack Orientation="Orientation.Vertical">
            <FluentLabel>
                The map is initialized to a specific camera position (Seattle, WA), with some common map controls.
            </FluentLabel>
        </FluentStack>
    </PageHeader>

    <FluentToolbar>
        <FluentButton Disabled="@overlay" IconStart="@(new Icons.Regular.Size20.ArrowReset())" Title="Reset Map" OnClick="@ResetMap" />
        <FluentSpacer Width="5"/>
        <FluentButton IconStart="@(new Icons.Regular.Size20.Layer())" Title="Create Layer" OnClick="@CreateLayer" />
    </FluentToolbar>

    <LayerContent ActiveTab="@activeTab">
        <MapContent>
            <AzureMap Id="@mapId"
                      Height="@mapHeight"
                      Width="@mapWidth"
                      Controls="@MapHelpers.GetDefaultControls()"
                      OnMapEventReady="@OnMapEventReady"
                      Options="@options" />
        </MapContent>
        <SettingsContent>
            <BubbleLayerUI Content="@uiModel" Height="@mapHeight" Width="@mapWidth" />
        </SettingsContent>
    </LayerContent>
</FluentLayout>

<FluentOverlay @bind-Visible="@overlay"
               Transparent="false">
    <FluentProgressRing />
</FluentOverlay>

<style>
    .hidden {
        display: none;
    }
</style>


@code {
    private const string layerType = "Bubble";
    private readonly string hRefCode = HRefCodeSource.Sandbox.CodeUrl("Layers/BubbleLayer.razor");
    private readonly string hRefDocs = HRefCodeSource.AzureDocs.CodeUrl("map-add-bubble-layer");
    private readonly string subject = $"{layerType} Layer";
    private const string mapId = $"map{layerType}Layer";
    private const string sourceId = $"my{layerType}Source";
    private string mapHeight = "400px";
    private string mapWidth = "100%";
    private bool overlay;
    private LayerContentTab activeTab;
    private MapOptions options = MapHelpers.GetDefaultMapOptions();
    private MapInterop? mapInterop;
    private BubbleLayerUIModel? uiModel;
    private readonly BubbleLayerDef layerDef = new()
    {
        Id = $"my{mapId}Layer",
        SourceId = sourceId,
        Before = "labels",

    };

    protected override void OnInitialized()
    {
        uiModel = new(XmlService);
        uiModel.Source = layerDef;
    }

	private async Task OnMapEventReady(MapEventArgs e)
    {
        try
        {
            await Task.CompletedTask;
            mapInterop = new MapInterop(JSRuntime, mapId);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, null);
            ToastService.Error(ex);
        }
    }

    private async Task ResetMap()
    {
        try
        {
            await mapInterop!.Configuration.SetMapOptions(options!);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, null);
            ToastService.Error(ex);
        }
    }

    private async Task CreateLayer()
    {
        try
        {
            if (mapInterop is null) return;

            await RemoveLayer();

            await mapInterop.Map.CreateDatasource(layerDef.GetDataSource());
            await mapInterop.Layers.CreateLayer(layerDef);

            var feature = new MapFeatureDef(new MultiPoint(await DataSerice.GetBubbleLayerData()))
            {
                Properties = new Properties
                {
                    { "title", "my bubble layer" },
                    { "demo", true },
                }
            };

            await mapInterop.Layers.AddMapFeature(feature, layerDef.SourceId!);


            await mapInterop.ZoomTo(new Position(-73.985550, 40.77900), 11);
            ToastService.Success($"{layerType} layer was created.");
            activeTab = LayerContentTab.Map;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, null);
            ToastService.Error(ex);
        }
    }

    private async Task RemoveLayer()
    {
        try
        {
            if (mapInterop is null) return;

            await mapInterop.Layers.RemoveLayer(layerDef.Id!);
            await mapInterop.Map.ClearDatasource(layerDef.SourceId!);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, null);
            ToastService.Error(ex);
        }
    }
}
