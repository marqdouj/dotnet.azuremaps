@page "/map-layer-Image"
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime
@inject ILogger<ImageLayer> Logger
@inject IToastService ToastService

<PageTitle>@subject</PageTitle>

<FluentLayout>
    <PageHeader Header="@subject"
                HRefCode="@hRefCode"
                HRefDocs="@hRefDocs"
                Subject="@subject">
        <LayerHeaderContent />
    </PageHeader>

    <FluentToolbar>
        <FluentButton Disabled="@overlay" IconStart="@(new Icons.Regular.Size20.ArrowReset())" Title="Reset Map" OnClick="@ResetMap" />
        <FluentSpacer Width="5" />
        <FluentButton IconStart="@(new Icons.Regular.Size20.Layer())" Title="Create Layer" OnClick="@CreateLayer" />
    </FluentToolbar>

    <LayerContent ActiveTab="@activeTab">
        <MapContent>
            <ComingSoon Height="@mapHeight" Width="@mapWidth" />
        </MapContent>
        <SettingsContent>
            <ComingSoon Height="@mapHeight" Width="@mapWidth" />
        </SettingsContent>
    </LayerContent>
</FluentLayout>

<FluentOverlay @bind-Visible="@overlay"
               Transparent="false">
    <FluentProgressRing />
</FluentOverlay>

@code {
    private const string layerType = "Image";
    private readonly string subject = $"{layerType} Layer";
    private readonly string hRefCode = HRefCodeSource.Sandbox.CodeUrl($"Layers/{layerType}Layer.razor");
    private readonly string hRefDocs = HRefCodeSource.AzureDocs.CodeUrl("map-add-image-layer");
    private string mapHeight = "400px";
    private string mapWidth = "100%";
    private bool overlay;
    private LayerContentTab activeTab;
    private MapOptions options = MapHelpers.GetDefaultMapOptions();
    private MapInterop? mapInterop;

    private async Task OnMapEventReady(MapEventArgs e)
    {
        try
        {
            await Task.CompletedTask;
            mapInterop = new MapInterop(JSRuntime, e.MapId);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, null);
            ToastService.Error(ex);
        }
    }

    private async Task ResetMap()
    {
        try
        {
            ToastService.Info("Coming Soon...");
            //await mapInterop!.Configuration.SetMapOptions(options!);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, null);
            ToastService.Error(ex);
        }
    }

    private async Task CreateLayer()
    {
        try
        {
            ToastService.Info("Coming Soon...");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, null);
            ToastService.Error(ex);
        }
    }
}
