@page "/map-custom"
@using Sandbox.AzureMaps
@rendermode InteractiveServer
@implements IAsyncDisposable
@inject IJSRuntime JSRuntime
@inject ILogger<CustomMap> Logger
@inject IToastService ToastService

<PageTitle>Custom Map</PageTitle>

<FluentLayout>
    <MapPageHeader Header="@header" HRefCode="@hRefCode">
        <FluentLabel>
            This example demonstrates how add custom functionality to a basic Azure Map, using the Marqdouj.DotNet.AzureMaps library in a Blazor application.
            <br />
            The map is initialized to a specific camera position (Seattle, WA), with no map controls.
            <br />
            Use the "Reset Map" button to reset the map to its initial state.
            <br />
			Three 'interop' buttons allow you to check for map access, add controls, or remove controls using JS Interop.
        </FluentLabel>
    </MapPageHeader>

    <FluentToolbar>
        <FluentButton Disabled="@disabled" IconStart="@(new Icons.Regular.Size20.ArrowReset())" Title="Reset Map" OnClick="@ResetMap" />
        <FluentSpacer Width="5" />
        <FluentButton Disabled="@disabled" IconStart="@(new Icons.Regular.Size20.Map())" Title="Check for map access using JS Interop" OnClick="@CheckForMap" />
        <FluentButton Disabled="@disabled" IconStart="@(new Icons.Regular.Size20.DesignIdeas())" Title="Add Controls" OnClick="@AddControls" />
        <FluentButton Disabled="@disabled" IconStart="@(new Icons.Regular.Size20.ClearFormatting())" Title="Remove Controls" OnClick="@RemoveControls" />
    </FluentToolbar>

    <FluentStack Orientation="Orientation.Vertical">
        <AzureMap Id="@MapId"
                  Height="@mapHeight"
                  Width="@mapWidth"
                  OnMapEventReady="@OnMapEventReady"
                  Options="@options" />
    </FluentStack>
</FluentLayout>

<FluentOverlay @bind-Visible="@overlay"
               Transparent="false">
    <FluentProgressRing />
</FluentOverlay>

@code {
	private const string MapId = "customMap"; // This is optional; if not provided, a GUID will be generated.
    private readonly string hRefCode = HRefCodeSource.Sandbox.CodeUrl("CustomMap.razor");
    private readonly string header = "Custom Map (JS Interop)";
    private string mapHeight = "400px";
    private string mapWidth = "100%";
    private bool overlay;
    private bool disabled => overlay || mapInterop == null;
    private MapOptions? options = MapHelpers.GetDefaultMapOptions();
    private MapInterop? mapInterop;
    private SandboxMaps? sandboxMaps;

    protected override void OnInitialized()
    {
        sandboxMaps = new SandboxMaps(JSRuntime);
    }

    private async Task OnMapEventReady(MapEventArgs e)
    {
        try
        {
            await Task.CompletedTask;
            mapInterop = new MapInterop(JSRuntime, e.MapId);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, null);
            ToastService.Error(ex);
        }
    }

    private async Task ResetMap()
    {
        try
        {
            await mapInterop!.Configuration.SetMapOptions(options!);
            _= await sandboxMaps!.RemoveControls(mapInterop.MapId);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, null);
            ToastService.Error(ex);
        }
    }

    private async Task CheckForMap()
    {
        try
        {
            var exists = await sandboxMaps!.MapExists(mapInterop!.MapId);
            ToastService.Info($"Check for map access: {exists}");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, null);
            ToastService.Error(ex);
        }
    }

    private async Task AddControls()
    {
        try
        {
            var msg = await sandboxMaps!.AddControls(mapInterop!.MapId);
            ToastService.Info(msg);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, null);
            ToastService.Error(ex);
        }
    }

    private async Task RemoveControls()
    {
        try
        {
            var msg = await sandboxMaps!.RemoveControls(mapInterop!.MapId);
            ToastService.Info(msg);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, null);
            ToastService.Error(ex);
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (sandboxMaps != null)
        {
            await sandboxMaps.DisposeAsync();
			sandboxMaps = null;
        }
    }
}
